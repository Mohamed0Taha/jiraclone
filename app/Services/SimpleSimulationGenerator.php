<?php

namespace App\Services;

use Illuminate\Support\Str;
use Illuminate\Support\Facades\Log;
use App\Models\User;

/**
 * SimpleSimulationGenerator
 * Lightweight ephemeral project simulation data generator.
 * Generates a project description (AI if available), decomposes into tasks,
 * synthesizes a team with skills, and produces disruptive events.
 * No database persistence; caller decides storage (session/Inertia props).
 */
class SimpleSimulationGenerator
{
    public function __construct(protected OpenAIService $openAI) {}

    public function generate(User $user): array
    {
    $project = $this->generateProjectIdea();
    // Ensure weeks-based timeline capped at 10 weeks
    $timelineWeeks = (int)($project['constraints']['timeline_weeks'] ?? rand(6,10));
    $timelineWeeks = max(6, min(10, $timelineWeeks));
    $project['total_weeks'] = $timelineWeeks;
    // Introduce simple cost model assumptions (aligned with front-end use of $100/h)
    $project['cost_model'] = [
        'default_member_hourly_rate' => 100,
        'currency' => 'USD',
        'notes' => 'Costs are simulated; savings generated by cancellations & removals re-enter remaining budget.'
    ];
    $tasks = $this->generateTasks($project); // includes per-task budgets
    $team = $this->generateTeam($project, $tasks); // ensure skill coverage for all task required skills
    // Improved intelligent auto-assignment:
    // 1. Sort tasks by priority (High->Medium->Low) then by larger estimated hours first.
    // 2. For each task, rank candidate members by matching skill count desc then load ratio asc.
    // 3. Load ratio = (already assigned estimated hours) / capacity_hours.
    // 4. If only required skill is "General" treat as wildcard (no skill penalty).
    $memberLoad = [];
    foreach ($team as $m) { $memberLoad[$m['name']] = 0; }
    $priorityRank = ['High'=>0,'Medium'=>1,'Low'=>2];
    $sortedKeys = array_keys($tasks);
    usort($sortedKeys, function($a,$b) use ($tasks,$priorityRank){
        $ta = $tasks[$a]; $tb = $tasks[$b];
        $pa = $priorityRank[$ta['priority']] ?? 3; $pb = $priorityRank[$tb['priority']] ?? 3;
        if ($pa === $pb) { return ($tb['estimated_hours'] ?? 0) <=> ($ta['estimated_hours'] ?? 0); }
        return $pa <=> $pb;
    });
    foreach ($sortedKeys as $k) {
        $t =& $tasks[$k];
        $required = $t['required_skills'] ?? ['General'];
        $generalOnly = count($required) === 1 && $required[0] === 'General';
        $candidates = [];
        foreach ($team as $m) {
            $matches = $generalOnly ? $m['skills'] : array_intersect($required, $m['skills']);
            if ($generalOnly || count($matches) > 0) {
                $capacity = $m['capacity_hours'] ?? 40;
                $ratio = $capacity > 0 ? ($memberLoad[$m['name']] / $capacity) : 1.0;
                $candidates[] = [
                    'm' => $m,
                    'matchCount' => $generalOnly ? 0 : count($matches),
                    'ratio' => $ratio,
                ];
            }
        }
        if ($candidates) {
            usort($candidates, function($x,$y){
                if ($x['matchCount'] === $y['matchCount']) {
                    if (abs($x['ratio'] - $y['ratio']) < 0.0001) { return rand(-1,1); }
                    return $x['ratio'] <=> $y['ratio'];
                }
                return $y['matchCount'] <=> $x['matchCount'];
            });
            $chosen = $candidates[0]['m'];
            $t['assignee'] = $chosen['name'];
            $memberLoad[$chosen['name']] += ($t['estimated_hours'] ?? 0);
        } else {
            $fallback = $team[array_rand($team)] ?? null;
            if ($fallback) { $t['assignee'] = $fallback['name']; $memberLoad[$fallback['name']] += ($t['estimated_hours'] ?? 0); }
        }
        unset($t);
    }
    // Provide an initial realistic mix of task statuses (not all Pending)
    // Strategy: Highest priority tasks begin In Progress (10-30%); a small subset of others partially started (5-15%). None completed at week 1.
    $highIds = array_keys(array_filter($tasks, fn($t)=>($t['priority'] ?? '') === 'High'));
    shuffle($highIds);
    $startedHigh = array_slice($highIds, 0, min( max(1, (int)ceil(count($highIds)*0.5)), 3));
    foreach ($tasks as &$t) {
        if (in_array(array_search($t, $tasks, true), $startedHigh, true)) { continue; } // safeguard (not used due to index mismatch but retained)
    }
    foreach ($tasks as &$t) {
        if (in_array($t['id'], $startedHigh)) {
            $t['status'] = 'In Progress';
            $t['progress'] = rand(10,30);
        }
    }
    // Start a couple of medium tasks
    $mediumIds = array_keys(array_filter($tasks, fn($t)=>($t['priority'] ?? '') === 'Medium'));
    shuffle($mediumIds);
    $startedMedium = array_slice($mediumIds, 0, min(2, max(0, (int)floor(count($mediumIds)*0.3))));
    foreach ($tasks as &$t) {
        if (in_array($t['id'], $startedMedium) && ($t['status'] ?? 'Pending') === 'Pending') {
            $t['status'] = 'In Progress';
            $t['progress'] = rand(5,15);
        }
    }
    // Recompute remaining_hours
    foreach ($tasks as &$t) {
        if (isset($t['estimated_hours'])) {
            $t['remaining_hours'] = max(0, (int) round($t['estimated_hours'] * (1 - ($t['progress'] ?? 0)/100)));
        }
    }
    unset($t);
    // Ensure tasks array order remains by original id ascending for stable UI ordering
    usort($tasks, fn($a,$b) => ($a['id'] ?? 0) <=> ($b['id'] ?? 0));
    $events = $this->generateEvents($project, $team, $tasks); // actionable events including workload related

        return [
            'project' => $project,
            'tasks' => $tasks,
            'team' => $team,
            'events' => $events,
        ];
    }

    protected function generateProjectIdea(): array
    {
        try {
            // Per-run unique seed to encourage varied AI output and allow front-end differentiation
            $seed = (string) Str::uuid();
            $json = $this->openAI->chatJson([
                ['role' => 'system', 'content' => 'You create diverse, realistic non-software-only project scenarios (healthcare, education, manufacturing, operations, marketing, events, sustainability, construction, finance). Return STRICT JSON only.'],
                ['role' => 'user', 'content' => 'Seed: '.$seed.'\nGenerate one project with: title (avoid repeating past examples), description (45-70 words, incorporate a subtle unique angle), domain, primary_objective, constraints {budget: number(20000-60000), timeline_weeks: number(6-20), risk_level: low|medium|high}, key_deliverables (6-10 concise bullet strings). Ensure variety vs common sustainability rollouts.']
            ], temperature: 0.8);
            if (!is_array($json) || !isset($json['title'])) {
                return $this->fallbackIdea();
            }
            return [
                'title' => $json['title'],
                'description' => $json['description'] ?? 'Project scenario',
                'domain' => $json['domain'] ?? 'General Operations',
                'primary_objective' => $json['primary_objective'] ?? 'Deliver core outcomes within constraints',
                'constraints' => $json['constraints'] ?? [
                    'budget' => rand(25000,50000),
                    'timeline_weeks' => rand(8,16),
                    'risk_level' => collect(['low','medium','high'])->random(),
                ],
                'key_deliverables' => $json['key_deliverables'] ?? $this->randomDeliverables(),
                'generated_via' => 'ai',
                'instance_id' => $seed,
            ];
        } catch (\Throwable $e) {
            Log::info('SimpleSimulationGenerator AI idea failed', ['error' => $e->getMessage()]);
            return $this->fallbackIdea();
        }
    }

    protected function fallbackIdea(): array
    {
        $angles = [
            'leveraging gamified micro-challenges',
            'introducing IoT-based usage telemetry',
            'piloting department scorecards with public leaderboards',
            'embedding green KPIs into quarterly reviews',
            'partnering with a local university for audit validation'
        ];
        $domains = ['Sustainability','Facilities','Operations','Compliance','Change Management'];
        $domain = $domains[array_rand($domains)];
        $seed = (string) Str::uuid();
        return [
            'title' => $domain.' Initiative Rollout #'.substr($seed,0,8),
            'description' => 'Deploy a cross-functional program '.$angles[array_rand($angles)].' to drive measurable reductions and cultural adoption within a constrained cost envelope.',
            'domain' => $domain,
            'primary_objective' => 'Achieve measurable uplift in target KPIs within timeframe',
            'constraints' => [
                'budget' => rand(22000, 48000),
                'timeline_weeks' => rand(8, 14),
                'risk_level' => collect(['low','medium','high'])->random(),
            ],
            'key_deliverables' => $this->randomDeliverables(),
            'generated_via' => 'fallback',
            'instance_id' => $seed,
        ];
    }

    protected function randomDeliverables(): array
    {
        $pool = [
            'Baseline resource consumption report',
            'Energy optimization action plan',
            'Stakeholder training workshops',
            'Waste reduction pilot deployment',
            'Vendor sustainability compliance matrix',
            'Executive progress dashboard',
            'Risk & mitigation log',
            'Post-initiative performance audit',
            'Policy & procedure updates',
            'Communications rollout package'
        ];
        shuffle($pool);
        return array_slice($pool, 0, rand(6,9));
    }

    protected function generateTasks(array $project): array
    {
        $base = $project['key_deliverables'] ?? $this->randomDeliverables();
        $tasks = [];
        $totalBudget = $project['constraints']['budget'] ?? rand(25000,50000);
        $hoursTotal = 0;
        $estimates = [];
        foreach ($base as $idx => $deliverable) {
            $est = rand(6,16);
            $estimates[$idx] = $est;
            $hoursTotal += $est;
        }
        foreach ($base as $idx => $deliverable) {
            $est = $estimates[$idx];
            // proportional budget allocation with slight randomization
            $ratio = $hoursTotal > 0 ? ($est / $hoursTotal) : (1 / count($base));
            $budget = (int) round($totalBudget * $ratio * rand(90,115)/100); // +/-15%
            $sharePct = $totalBudget > 0 ? round(($budget / $totalBudget) * 100, 2) : null;
            $tasks[] = [
                'id' => $idx + 1,
                'title' => Str::limit($deliverable, 72),
                'priority' => collect(['High','Medium','Low'])->random(),
                'status' => 'Pending',
                'assignee' => null,
                'progress' => 0,
                'estimated_hours' => $est,
                'remaining_hours' => $est,
                'required_skills' => $this->inferSkills($deliverable),
                'budget' => $budget,
                'budget_share_pct' => $sharePct,
                'cancellable' => true,
            ];
        }
        return $tasks;
    }

    protected function inferSkills(string $text): array
    {
        $skillsMap = [
            'report' => 'Analysis',
            'energy' => 'Operations',
            'training' => 'Facilitation',
            'pilot' => 'Implementation',
            'vendor' => 'Procurement',
            'dashboard' => 'Analytics',
            'risk' => 'Risk Mgmt',
            'policy' => 'Governance',
            'communication' => 'Comms'
        ];
        $skills = [];
        foreach ($skillsMap as $k => $s) {
            if (Str::contains(Str::lower($text), $k)) { $skills[] = $s; }
        }
        if (empty($skills)) { $skills[] = 'General'; }
        return array_slice(array_unique($skills), 0, 3);
    }

    protected function generateTeam(array $project, array $tasks): array
    {
        $roles = [
            ['role' => 'Project Manager', 'skills' => ['Coordination','Risk Mgmt','Comms']],
            ['role' => 'Analyst', 'skills' => ['Analysis','Data','Reporting']],
            ['role' => 'Operations Lead', 'skills' => ['Operations','Optimization','Implementation']],
            ['role' => 'Trainer', 'skills' => ['Facilitation','Comms','Engagement']],
            ['role' => 'Procurement Specialist', 'skills' => ['Procurement','Vendors','Negotiation']],
            ['role' => 'Sustainability Expert', 'skills' => ['Governance','Compliance','Risk']],
            ['role' => 'Data Specialist', 'skills' => ['Analytics','Dashboards','Metrics']],
        ];
        shuffle($roles);
        // Collect required skills from tasks
        $requiredSkills = [];
        foreach ($tasks as $t) {
            foreach ($t['required_skills'] as $s) { $requiredSkills[$s] = true; }
        }
        $requiredSkills = array_keys($requiredSkills);
        $team = [];
        $id = 1;
    $defaultRate = $project['cost_model']['default_member_hourly_rate'] ?? 100;
        // First, seed with role templates ensuring coverage
        foreach ($requiredSkills as $skill) {
            // find a role offering this skill
            $matchedRole = null;
            foreach ($roles as $r) {
                if (in_array($skill, $r['skills'])) { $matchedRole = $r; break; }
            }
            if (!$matchedRole) {
                $matchedRole = ['role' => $skill.' Specialist', 'skills' => [$skill]];
            }
            // If not already a member with this skill, add one
            $alreadyCovered = false;
            foreach ($team as $m) { if (in_array($skill, $m['skills'])) { $alreadyCovered = true; break; } }
            if (!$alreadyCovered) {
        $capacity = rand(30,40);
        $hourly = (int) round($defaultRate * rand(90,125)/100); // +/-25%
                $team[] = [
                    'id' => $id++,
                    'name' => $this->fakeName(),
                    'role' => $matchedRole['role'],
                    'skills' => $matchedRole['skills'],
            'workload' => rand(25, 70),
            'status' => collect(['Active','Busy','Available'])->random(),
            'capacity_hours' => $capacity,
            // new morale & cost attributes consumed by front-end
            'morale' => rand(60,80),
            'hourly_rate' => $hourly,
            'weekly_cost' => $hourly * $capacity,
            'removable' => true,
                ];
            }
        }
        // Fill to minimum size if needed
        while (count($team) < 5) {
            $r = $roles[array_rand($roles)];
        $capacity = rand(30,40);
        $hourly = (int) round($defaultRate * rand(90,125)/100);
            $team[] = [
                'id' => $id++,
                'name' => $this->fakeName(),
                'role' => $r['role'],
                'skills' => $r['skills'],
        'workload' => rand(25, 70),
        'status' => collect(['Active','Busy','Available'])->random(),
        'capacity_hours' => $capacity,
        'morale' => rand(60,80),
        'hourly_rate' => $hourly,
        'weekly_cost' => $hourly * $capacity,
        'removable' => true,
            ];
        }
        // Cap at 8 members
        $team = array_slice($team, 0, 8);
        return $team;
    }

    protected function fakeName(): string
    {
        $first = ['Sarah','Michael','Ava','Liam','Noah','Grace','Daniel','Olivia','Ethan','Maya','Lucas','Emma','Sofia','Henry','Nora'];
        $last = ['Chen','Johnson','Patel','Rodriguez','Khan','Singh','Garcia','Davis','Martinez','Walker','Lopez','Reed','Cooper','Diaz','Mitchell'];
        return $first[array_rand($first)].' '.$last[array_rand($last)];
    }

    protected function generateEvents(array $project, array $team, array $tasks): array
    {
        $totalWeeks = $project['total_weeks'] ?? 10;
        $events = [];
        $eventId = 1;

        $taskPool = $tasks;
        $memberPool = $team;

    // First inject mandatory scenario coverage events (manager directive, removal, conflict, requests, budget, raise)
    $mandatory = $this->generateMandatoryScenarioEvents($project, $team, $tasks, $eventId, $totalWeeks);
    $events = array_merge($events, $mandatory);

        // Workload overload & task complaint events (week 1-3 window)
        if (!empty($team) && !empty($tasks)) {
            // Compute task counts by member
            $counts = [];
            foreach ($tasks as $t) { if ($t['assignee']) { $counts[$t['assignee']] = ($counts[$t['assignee']] ?? 0) + 1; } }
            arsort($counts);
            $topName = array_key_first($counts);
            $overMember = collect($team)->firstWhere('name', $topName);
            if ($overMember && $counts[$topName] > max(2, ceil(count($tasks)/count($team)))) {
                $memberTaskIds = collect($tasks)->where('assignee',$topName)->pluck('id')->values()->all();
                $events[] = [
                    'id' => $eventId++,
                    'trigger_week' => 1,
                    'title' => 'Workload Alert: '.$overMember['name'],
                    'type' => 'Workload Risk',
                    'desc' => $overMember['name'].' has too many concurrent tasks assigned ('.count($memberTaskIds).'). Reassign some to balance capacity.',
                    'impact' => 'Risk of burnout / delays',
                    'member_ids' => [$overMember['id']],
                    'task_ids' => array_slice($memberTaskIds,0,5),
                    'action_type' => 'reassign_task',
                    'resolution_rule' => [ 'must_reassign_from_member' => $overMember['name'] ],
                    'actions' => [ 'Reassign one or more tasks to another member', 'Consider priority when balancing workload' ]
                ];
            }
            // Complaint: pick a random task and its assignee
            $complaintTask = $tasks[array_rand($tasks)];
            if (!empty($complaintTask['assignee'])) {
                $complainMember = collect($team)->firstWhere('name',$complaintTask['assignee']);
                if ($complainMember) {
                    $events[] = [
                        'id' => $eventId++,
                        'trigger_week' => 2,
                        'title' => 'Task Complaint: '.$complainMember['name'],
                        'type' => 'Task Complaint',
                        'desc' => $complainMember['name'].' expresses concern about fit/alignment for task "'.$complaintTask['title'].'".',
                        'impact' => 'Engagement risk',
                        'member_ids' => [$complainMember['id']],
                        'task_ids' => [$complaintTask['id']],
                        'action_type' => 'reassign_task',
                        'resolution_rule' => [ 'must_change_assignee_for_task_ids' => [$complaintTask['id']] ],
                        'actions' => [ 'Find better suited member', 'Communicate rationale for reassignment' ]
                    ];
                }
            }
            // Budget overrun potential: require cancelling at least one low priority task
            $lowIds = collect($tasks)->where('priority','Low')->pluck('id')->values()->all();
            if (count($lowIds) >= 1) {
                $events[] = [
                    'id' => $eventId++,
                    'trigger_week' => 3,
                    'title' => 'Budget Risk: Potential Overrun',
                    'type' => 'Budget Risk',
                    'desc' => 'Forecast indicates potential budget overrun if all low priority tasks proceed.',
                    'impact' => 'Budget pressure',
                    'member_ids' => [],
                    'task_ids' => array_slice($lowIds,0,6),
                    'action_type' => 'update_task',
                    'resolution_rule' => [ 'must_cancel_one_of_task_ids' => array_slice($lowIds,0,6) ],
                    'actions' => [ 'Cancel or defer at least one low value task', 'Reallocate saved budget to critical items' ]
                ];
            }
        }

        for ($week = 1; $week <= $totalWeeks; $week++) {
            // Inject a weekly standup event (used by front-end to optionally trigger progress boost)
            $events[] = [
                'id' => $eventId++,
                'trigger_week' => $week,
                'title' => 'Weekly Standup',
                'type' => 'Standup',
                'desc' => 'Coordinate progress, surface blockers, and align priorities. Triggering this boosts task progress slightly at a budget/time cost.',
                'impact' => 'Minor progress acceleration',
                'member_ids' => collect($team)->pluck('id')->all(),
                'task_ids' => [],
                'action_type' => 'standup',
                'actions' => [
                    'Review active high priority tasks',
                    'Surface blockers & reassign if needed',
                    'Apply small global progress boost when executed'
                ],
                'morale_effect' => +2,
                'progress_boost_pct' => 10,
                'budget_cost' =>  (int) round(array_sum(array_column($team,'hourly_rate')) * 0.5), // half hour equivalent cost
            ];
            $count = rand(1,3); // 1-3 events per week
            for ($i=0; $i < $count; $i++) {
                $template = $this->randomEventTemplate($taskPool, $memberPool, $tasks, $team, $project);
                $events[] = array_merge([
                    'id' => $eventId++,
                    'trigger_week' => $week,
                ], $template);
            }
            // Add periodic agile / culture events (e.g., retros, celebrations) to enrich simulation
            if ($week % 2 === 1) { // every other week
                $ceremony = $this->agileCeremonyTemplate($week, $tasks, $team, $project);
                $events[] = array_merge([
                    'id' => $eventId++,
                    'trigger_week' => $week,
                ], $ceremony);
            }
        }
        // Ensure unique IDs already assigned; sort for deterministic ordering by week then id
        usort($events, function($a,$b){
            if ($a['trigger_week'] === $b['trigger_week']) { return $a['id'] <=> $b['id']; }
            return $a['trigger_week'] <=> $b['trigger_week'];
        });
        return $events;
    }

    protected function agileCeremonyTemplate(int $week, array $tasks, array $team, array $project): array
    {
        $options = ['Sprint Retro','Sprint Planning','Team Celebration','Mid-Sprint Sync'];
        $pick = $options[array_rand($options)];
        $highTask = collect($tasks)->where('priority','High')->where('status','Pending')->first();
        return match($pick) {
            'Sprint Retro' => [
                'title' => 'Sprint Retrospective Insights',
                'type' => 'Ceremony',
                'desc' => 'Retro identifies one process bottleneck; addressing it could free ~5% capacity next week.',
                'impact' => 'Opportunity: minor efficiency gain',
                'member_ids' => [],
                'task_ids' => [],
                'action_type' => 'team_event', // resolved by running a team event
                'actions' => [
                    'Document one improvement action',
                    'Select owner to implement',
                    'Optionally adjust one task estimate (-5%) if justified'
                ]
            ],
            'Sprint Planning' => [
                'title' => 'Sprint Planning Alignment',
                'type' => 'Ceremony',
                'desc' => 'Revisit priorities; ensure high value tasks are staffed first.',
                'impact' => 'Focus alignment',
                'member_ids' => [],
                'task_ids' => $highTask ? [$highTask['id']] : [],
                'action_type' => 'update_task', // resolve by updating linked high priority task
                'actions' => [
                    'Confirm scope of top priority tasks',
                    'Reassign underutilized members',
                    'Defer lowest value item if capacity tight'
                ]
            ],
            'Team Celebration' => [
                'title' => 'Team Celebration Opportunity',
                'type' => 'Team Event',
                'desc' => 'Option to allocate small time for recognition; may boost morale (+5% velocity next week).',
                'impact' => 'Morale boost potential',
                'member_ids' => [],
                'task_ids' => [],
                'action_type' => 'team_event',
                'actions' => [
                    'Decide whether to invest time in celebration',
                    'If yes, ensure critical tasks stay staffed',
                    'Track morale changes'
                ]
            ],
            default => [
                'title' => 'Mid-Sprint Sync',
                'type' => 'Ceremony',
                'desc' => 'Brief sync uncovers minor blockers early.',
                'impact' => 'Risk mitigation',
                'member_ids' => [],
                'task_ids' => [],
                'action_type' => 'standup', // resolved by conducting a standup
                'actions' => [
                    'Surface emerging risks',
                    'Update at-risk task status',
                    'Rebalance workload if needed'
                ]
            ]
        };
    }

    /**
     * Generate mandatory scenario coverage events so every simulation includes:
     * - Manager directive email (add task)
     * - Manager directive email (update existing task detail)
     * - Team member removal scenario
     * - Team conflict between two members
     * - Team request / wish (quality of life / tooling)
     * - Budget increase request for a task
     * - Compensation / raise request
     */
    protected function generateMandatoryScenarioEvents(array $project, array $team, array $tasks, int &$eventId, int $totalWeeks): array
    {
        if (empty($team)) { return []; }
        $events = [];
        $randomTask = $tasks[array_rand($tasks)] ?? null;
        $anotherTask = $tasks[array_rand($tasks)] ?? $randomTask;
        $memberA = $team[array_rand($team)];
        $memberB = $team[array_rand($team)];
        // ensure distinct
        if ($memberA['id'] === $memberB['id'] && count($team) > 1) {
            $memberB = $team[($memberA['id'] % count($team))];
        }
        $weekSlots = range(1, min($totalWeeks, 7)); // place mandatory events early (first 7 weeks)
        shuffle($weekSlots);
        $pickWeek = function() use (&$weekSlots, $totalWeeks) {
            return array_shift($weekSlots) ?? rand(1, $totalWeeks);
        };

    // Manager directive to add a new task (structured so UI can generate directly)
        $events[] = [
            'id' => $eventId++,
            'trigger_week' => $pickWeek(),
            'title' => 'Manager Email: Add Compliance Audit Task',
            'type' => 'Manager Directive',
            'desc' => 'Manager requests adding a new task "Compliance Audit Prep" (Medium priority, estimated 10h, skills: Governance, Analysis) to address emerging audit requirements.',
            'impact' => 'Scope increase (new task required)',
            'member_ids' => [],
            'task_ids' => [],
            'action_type' => 'add_task',
            // Structured metadata consumed by front-end add-task dialog
            'new_task' => [
                'title' => 'Compliance Audit Prep',
                'priority' => 'Medium',
                'estimated_hours' => 10,
                'required_skills' => ['Governance','Analysis']
            ],
            'actions' => [
                'Create new task with provided attributes',
                'Review capacity & reallocate if needed',
                'Adjust budget allocation accordingly'
            ]
        ];
        // Manager directive to update an existing task
        if ($randomTask) {
            $events[] = [
                'id' => $eventId++,
                'trigger_week' => $pickWeek(),
                'title' => 'Manager Email: Update Task Detail',
                'type' => 'Manager Directive',
                'desc' => 'Manager requests raising priority of "'.$randomTask['title'].'" to High and increasing estimated hours by 20% due to added regulatory checkpoints.',
                'impact' => 'Re-estimate & reprioritize',
                'member_ids' => [],
                'task_ids' => [$randomTask['id']],
                'action_type' => 'update_task',
                'actions' => [
                    'Update task priority to High',
                    'Increase estimate & budget proportionally',
                    'Communicate change to team'
                ]
            ];
        }
        // Team member removal scenario (attrition / reassignment)
        $events[] = [
            'id' => $eventId++,
            'trigger_week' => $pickWeek(),
            'title' => 'Attrition Notice: '.$memberA['name'],
            'type' => 'Team Removal',
            'desc' => $memberA['name'].' informs the team they are leaving / reassigned. Their capacity is lost from next week onward.',
            'impact' => 'Capacity reduction (remove member)',
            'member_ids' => [$memberA['id']],
            'task_ids' => [],
            'potential_savings' => ($memberA['capacity_hours'] ?? 30) * max(0, ($totalWeeks - 1)) * 100,
            'action_type' => 'remove_member',
            'actions' => [
                'Unassign tasks allocated to this member',
                'Reassign to members with overlapping skills',
                'Consider deferring low priority work'
            ]
        ];
        // Team conflict event
        $conflictTasks = [];
        if ($anotherTask) { $conflictTasks[] = $anotherTask['id']; }
        $events[] = [
            'id' => $eventId++,
            'trigger_week' => $pickWeek(),
            'title' => 'Team Conflict: '.$memberA['name'].' & '.$memberB['name'],
            'type' => 'Team Conflict',
            'desc' => 'Interpersonal friction between '.$memberA['name'].' and '.$memberB['name'].' causing delays and communication gaps.',
            'impact' => 'Velocity risk',
            'member_ids' => [$memberA['id'], $memberB['id']],
            'task_ids' => $conflictTasks,
            'action_type' => 'team_event', // resolved through facilitation
            // Structured resolution options for UI to present selectable interventions
            'resolution_options' => [
                [
                    'key' => 'mediate_alignment',
                    'label' => 'Facilitate 30‑min mediation & realign roles',
                    'effects' => [
                        'morale_delta' => +5,
                        'velocity_delta_pct' => +3,
                        'focus_week_penalty' => 0
                    ],
                    'follow_up' => 'Schedule a 1‑week check‑in to ensure sustained cooperation.'
                ],
                [
                    'key' => 'reassign_task',
                    'label' => 'Reassign overlapping task to neutral member',
                    'effects' => [
                        'morale_delta' => +2,
                        'velocity_delta_pct' => +5,
                        'focus_week_penalty' => -1
                    ],
                    'follow_up' => 'Communicate rationale transparently to avoid perceived favoritism.'
                ],
                [
                    'key' => 'set_written_protocol',
                    'label' => 'Implement written decision protocol (adds short admin overhead)',
                    'effects' => [
                        'morale_delta' => +3,
                        'velocity_delta_pct' => +2,
                        'admin_overhead_hours' => 2
                    ],
                    'follow_up' => 'Review protocol usage after two weeks; remove if friction subsides.'
                ]
            ],
            // Backward compatible simple action hints (legacy consumers)
            'actions' => [
                'Select a resolution option (mediation, reassignment, or protocol)',
                'Apply effects to capacity / morale metrics',
                'Log follow‑up checkpoint for next sprint review'
            ]
        ];
        // Team request / wish (tooling / support)
        $events[] = [
            'id' => $eventId++,
            'trigger_week' => $pickWeek(),
            'title' => 'Team Request: Tooling Improvement',
            'type' => 'Team Request',
            'desc' => 'Team requests allocation of 8 hours to implement a lightweight automation script improving reporting efficiency.',
            'impact' => 'Optional scope (efficiency gain)',
            'member_ids' => [],
            'task_ids' => [],
            'action_type' => 'team_event', // treat approval as a team-level event investment
            'actions' => [
                'Decide whether to add supportive automation task',
                'If approved, create low priority task (8h, skills: Analytics, Comms)',
                'Reassess remaining capacity'
            ]
        ];
        // Budget increase request for a task
        if ($anotherTask) {
            $events[] = [
                'id' => $eventId++,
                'trigger_week' => $pickWeek(),
                'title' => 'Budget Increase Request: '.$anotherTask['title'],
                'type' => 'Budget Increase Request',
                'desc' => 'Task "'.$anotherTask['title'].'" owner requests +15% budget to mitigate quality risks.',
                'impact' => 'Budget pressure',
                'member_ids' => [],
                'task_ids' => [$anotherTask['id']],
                'action_type' => 'update_task',
                'actions' => [
                    'Evaluate ROI vs remaining contingency',
                    'Approve and adjust allocation OR decline and monitor risk',
                    'Update forecast dashboard'
                ]
            ];
        }
        // Compensation / raise request
        $events[] = [
            'id' => $eventId++,
            'trigger_week' => $pickWeek(),
            'title' => 'Compensation Discussion: '.$memberB['name'],
            'type' => 'Compensation Request',
            'desc' => $memberB['name'].' asks for a raise citing increased responsibility and workload.',
            'impact' => 'Engagement consideration',
            'member_ids' => [$memberB['id']],
            'task_ids' => [],
            'action_type' => 'praise_member', // simplified to positive feedback per allowed actions
            'actions' => [
                'Assess performance & criticality',
                'Decide acknowledgement / reward (non-monetary if budget tight)',
                'Communicate decision transparently'
            ]
        ];
        return $events;
    }

    protected function randomEventTemplate(array $tasks, array $members, array $allTasks, array $allMembers, array $project): array
    {
        $task = $tasks ? $tasks[array_rand($tasks)] : null;
        $member = $members ? $members[array_rand($members)] : null;
        $types = [
            'member_sickness', 'task_blocked', 'budget_adjustment', 'scope_increase', 'morale_shift', 'vendor_delay', 'priority_shift', 'accelerate_task',
            'manager_directive_update', 'team_conflict_minor', 'praise_opportunity'
        ];
        $type = $types[array_rand($types)];
        $lowPriorityTaskIds = collect($allTasks)->where('priority','Low')->pluck('id')->take(3)->values()->all();
        $highPriorityPending = collect($allTasks)->where('priority','High')->where('status','Pending')->pluck('id')->values()->all();

    $factory = match($type) {
        'member_sickness' => function() use ($member, $allTasks, $allMembers) {
                $impactedTasks = [];
                if ($member) {
                    foreach ($allTasks as $t) {
                        if (!empty(array_intersect($t['required_skills'], $member['skills']))) {
                            $impactedTasks[] = $t['id'];
                        }
                    }
                }
                return [
                    'title' => 'Sickness: '.($member['name'] ?? 'Member'),
                    'type' => 'Member Sickness',
                    'desc' => ($member['name'] ?? 'A team member')." is unavailable this week due to illness.",
                    'impact' => 'Capacity loss (member unavailable)',
                    'member_ids' => $member ? [$member['id']] : [],
                    'task_ids' => array_slice($impactedTasks,0,5),
            // Resolves automatically when all impacted tasks are reassigned off the sick member
            'action_type' => 'update_task',
                    'actions' => [
                        'Reassign impacted tasks to members with overlapping skills',
                        'Defer low priority impacted tasks if capacity constrained'
                    ]
                ];
            },
            'manager_directive_update' => function() use ($task) {
                return [
                    'title' => 'Manager Follow‑Up: Refine Task',
                    'type' => 'Manager Directive',
                    'desc' => 'Manager requests clarifying acceptance criteria and reducing variance risk on "'.($task['title'] ?? 'Task').'".',
                    'impact' => 'Refinement effort',
                    'member_ids' => [],
                    'task_ids' => $task ? [$task['id']] : [],
                    'action_type' => 'update_task',
                    'actions' => [
                        'Add acceptance criteria notes',
                        'Adjust estimate if clarity changes scope',
                        'Communicate update in standup'
                    ]
                ];
            },
            'team_conflict_minor' => function() use ($allMembers, $task) {
                $a = $allMembers[array_rand($allMembers)] ?? null;
                $b = $allMembers[array_rand($allMembers)] ?? null;
                if ($a && $b && $a['id'] === $b['id'] && count($allMembers) > 1) { $b = $allMembers[($a['id'] % count($allMembers))]; }
                return [
                    'title' => 'Minor Friction Reported',
                    'type' => 'Team Conflict',
                    'desc' => ($a['name'] ?? 'Member A').' and '.($b['name'] ?? 'Member B').' disagree on implementation approach.',
                    'impact' => 'Potential slowdown',
                    'member_ids' => array_filter([$a['id'] ?? null, $b['id'] ?? null]),
                    'task_ids' => $task ? [$task['id']] : [],
                    'action_type' => 'team_event',
                    'actions' => [
                        'Facilitate quick design sync',
                        'Document chosen approach',
                        'Acknowledge contributions of both parties'
                    ]
                ];
            },
            'praise_opportunity' => function() use ($allMembers, $task) {
                $m = $allMembers[array_rand($allMembers)] ?? null;
                return [
                    'title' => 'Recognition Opportunity',
                    'type' => 'Engagement',
                    'desc' => ($m['name'] ?? 'A team member').' delivered above expectations; public praise could reduce workload stress.',
                    'impact' => 'Morale increase potential',
                    'member_ids' => $m ? [$m['id']] : [],
                    'task_ids' => $task ? [$task['id']] : [],
                    'action_type' => 'praise_member',
                    'actions' => [
                        'Provide positive feedback (lowers perceived workload)',
                        'Highlight contribution in next standup',
                        'Encourage peer acknowledgements'
                    ]
                ];
            },
            'task_blocked' => fn() => [
                'title' => 'Task Blocked: '.($task['title'] ?? 'Task'),
                'type' => 'Task Blocked',
                'desc' => 'Progress halted on "'.($task['title'] ?? 'Task').'" pending clarification/resources.',
                'impact' => 'Requires mitigation to resume work',
                'member_ids' => [],
                'task_ids' => $task ? [$task['id']] : [],
                'action_type' => 'update_task',
                'actions' => [
                    'Identify blocker owner',
                    'Schedule quick resolution meeting',
                    'Update due date if delay > 1 week'
                ]
            ],
            'budget_adjustment' => fn() => [
                'title' => 'Budget Cut Implemented',
                'type' => 'Budget Adjustment',
                'desc' => 'Finance mandates immediate 6% reduction; optimize allocation.',
                'impact' => 'Budget -6%',
                'member_ids' => [],
                'task_ids' => $lowPriorityTaskIds,
                'action_type' => 'update_task',
                'actions' => [
                    'Evaluate cancellation of low priority tasks',
                    'Reduce scope on medium priority items',
                    'Reforecast remaining budget'
                ]
            ],
            'scope_increase' => fn() => [
                'title' => 'Scope Increase: '.($task['title'] ?? 'Task'),
                'type' => 'Scope Increase',
                'desc' => 'Stakeholders request enhancement increasing effort by ~25%.',
                'impact' => 'Additional hours required',
                'member_ids' => $member ? [$member['id']] : [],
                'task_ids' => $task ? [$task['id']] : [],
                'action_type' => 'update_task',
                'actions' => [
                    'Confirm new acceptance criteria',
                    'Adjust task estimate & budget proportionally',
                    'Rebalance resource allocation'
                ]
            ],
            'morale_shift' => fn() => [
                'title' => 'Morale Shift',
                'type' => 'Morale',
                'desc' => 'Team sentiment changes after milestone; throughput volatility.',
                'impact' => 'Velocity +/- 10%',
                'member_ids' => $member ? [$member['id']] : [],
                'task_ids' => [],
                'action_type' => 'team_event',
                'actions' => [
                    'Hold brief retro to surface issues',
                    'Reaffirm milestone goals',
                ]
            ],
            'vendor_delay' => fn() => [
                'title' => 'Vendor Delay: '.($task['title'] ?? 'Dependency'),
                'type' => 'Vendor Delay',
                'desc' => 'External dependency delays work by one week.',
                'impact' => 'Schedule risk',
                'member_ids' => $member ? [$member['id']] : [],
                'task_ids' => $task ? [$task['id']] : [],
                'action_type' => 'update_task',
                'actions' => [
                    'Escalate to vendor account manager',
                    'Pull forward alternate task to keep team utilized'
                ]
            ],
            'priority_shift' => fn() => [
                'title' => 'Priority Shift',
                'type' => 'Priority Change',
                'desc' => 'Stakeholders elevate importance of a high impact task.',
                'impact' => 'Increase priority',
                'member_ids' => $member ? [$member['id']] : [],
                'task_ids' => $task ? [$task['id']] : [],
                'action_type' => 'update_task',
                'actions' => [
                    'Raise task priority to High',
                    'Reassign senior member to accelerate delivery'
                ]
            ],
            'accelerate_task' => fn() => [
                'title' => 'Acceleration Request',
                'type' => 'Acceleration',
                'desc' => 'Leadership asks to pull forward a high priority deliverable.',
                'impact' => 'Focus shift',
                'member_ids' => $member ? [$member['id']] : [],
                'task_ids' => !empty($highPriorityPending) ? [$highPriorityPending[array_rand($highPriorityPending)]] : ($task ? [$task['id']] : []),
                'action_type' => 'update_task',
                'actions' => [
                    'Confirm feasibility of acceleration',
                    'Defer one low priority task if capacity constrained'
                ]
            ],
            default => fn() => [
                'title' => 'General Risk Update',
                'type' => 'General',
                'desc' => 'Minor adjustment required; monitor KPIs.',
                'impact' => 'Neutral',
                'member_ids' => [],
                'task_ids' => [],
                'action_type' => 'team_event',
                'actions' => ['Monitor metrics']
            ],
    };
    return $factory();
    }
}
