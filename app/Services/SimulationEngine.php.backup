<?php

namespace App\Services;

use App\Models\{VirtualProjectSimulation, SimulationTeamMember, SimulationTask, SimulationEvent};
use App\Support\TeamGenerator;
use App\Services\Gamification\{GamificationEngine,BuffSystem};

class SimulationEngine
{
    public function bootstrap(VirtualProjectSimulation $simulation): void
    {
    if ($simulation->teamMembers()->count() === 0) {
            app(TeamGenerator::class)->generate($simulation, 5);
        }
    // Initialize metrics defaults
    $metrics = $simulation->metrics ?? [];
    if (!isset($metrics['morale'])) { $metrics['morale'] = 80; }
    if (!isset($metrics['slowdown_factor'])) { $metrics['slowdown_factor'] = 1.0; }
    if (!isset($metrics['stakeholder_satisfaction'])) { $metrics['stakeholder_satisfaction'] = 82; }
    // Gamification metrics
    if (!isset($metrics['xp'])) { $metrics['xp'] = 0; }
    if (!isset($metrics['level'])) { $metrics['level'] = 1; }
    if (!isset($metrics['xp_log'])) { $metrics['xp_log'] = []; }
    // Initialize day only once; previously this reset to 0 every dashboard load causing stuck day display
    if (!isset($metrics['day_started'])) {
        if ($simulation->current_day === null || $simulation->current_day < 0) {
            $simulation->current_day = 0; // start at day 0
        }
        $metrics['day_started'] = true; // flag so we don't reset again
    }
    if (!isset($metrics['assignment_costs'])) { $metrics['assignment_costs'] = []; }
    $simulation->metrics = $metrics;
    $simulation->save();
    }

    public function generateAITasks(VirtualProjectSimulation $simulation): array
    {
        // Try AI-generated tasks first, fallback to keyword matching
        $aiTasks = $this->generateSmartTasks($simulation);
        if (!empty($aiTasks)) {
            return $aiTasks;
        }

        // Fallback to existing keyword-based logic
        $req = strtolower($simulation->requirements_document ?? '');
        $tasks = [];
        $base = [
            'authentication' => ['Implement auth backend','Design login UI','Session management'],
            'payment' => ['Integrate Stripe payments','Add webhooks processing'],
            'catalog' => ['Product listing component','Search & filtering module'],
            'deployment' => ['CI/CD pipeline setup','Containerize application'],
        ];
        foreach ($base as $keyword => $set) {
            if (str_contains($req, $keyword)) { foreach ($set as $t) { $tasks[] = $t; } }
        }
        if (empty($tasks)) { $tasks = ['Project skeleton setup','Initial architecture diagram','Environment configuration']; }
        $created = [];
        foreach ($tasks as $t) {
            $created[] = SimulationTask::create([
                'simulation_id' => $simulation->id,
                'title' => $t,
                'estimated_hours' => rand(3,8),
                'remaining_hours' => rand(3,8),
                'priority' => collect(['low','medium','high'])->random(),
                'skill_tags' => ['general'],
                'created_via' => 'ai'
            ]);
        }
        $this->ensureBaselineHours($simulation);
        return $created;
    }

    protected function generateSmartTasks(VirtualProjectSimulation $simulation): array
    {
        try {
            $openAI = app(\App\Services\OpenAIService::class);
            $domain = $simulation->meta['domain'] ?? $simulation->meta['category'] ?? 'General';
            $requirements = $simulation->requirements_document ?? '';
            $description = $simulation->description ?? '';

            $taskData = $openAI->chatJson([
                ['role' => 'system', 'content' => 'Generate realistic project tasks for diverse industries. Tasks should be specific, actionable, and appropriate for the project domain. Return ONLY JSON.'],
                ['role' => 'user', 'content' => "Generate 8-12 specific, actionable tasks for this $domain project: '$description'.\n\nRequirements:\n$requirements\n\nFor each task provide: title (specific actionable task), estimated_hours (4-16 hours), priority (low|medium|high), required_skills (1-3 skills needed), dependencies (task indices that must complete first). Ensure tasks are realistic for this industry, not software development tasks unless appropriate. JSON format: {\"tasks\": [{\"title\": \"\", \"estimated_hours\": 0, \"priority\": \"\", \"required_skills\": [], \"dependencies\": []}]}"]
            ]);

            if (!isset($taskData['tasks']) || !is_array($taskData['tasks'])) {
                return [];
            }

            $created = [];
            foreach ($taskData['tasks'] as $task) {
                if (!isset($task['title'])) continue;

                $created[] = SimulationTask::create([
                    'simulation_id' => $simulation->id,
                    'title' => $task['title'],
                    'estimated_hours' => (int) ($task['estimated_hours'] ?? rand(4, 12)),
                    'remaining_hours' => (int) ($task['estimated_hours'] ?? rand(4, 12)),
                    'priority' => in_array($task['priority'] ?? 'medium', ['low','medium','high']) ? $task['priority'] : 'medium',
                    'skill_tags' => is_array($task['required_skills'] ?? null) ? $task['required_skills'] : ['general'],
                    'created_via' => 'ai_smart',
                    'status' => 'todo',
                ]);
            }

            $this->ensureBaselineHours($simulation);
            return $created;
        } catch (\Exception $e) {
            \Illuminate\Support\Facades\Log::warning('Smart AI task generation failed', ['error' => $e->getMessage()]);
            return [];
        }
    }

    public function advanceDay(VirtualProjectSimulation $simulation): void
    {
        // Gamification daily cycle pre-processing (risk draw, buff cleanup, achievements)
        app(GamificationEngine::class)->dailyCycle($simulation);
        
        // 1. Natural task progress
        foreach ($simulation->tasks()->where('status','in_progress')->get() as $task) {
            $baseHours = rand(1,3);
            // Slowdown factor for global risk flags
            $slowdown = $simulation->metrics['slowdown_factor'] ?? 1.0;
            $effective = max(1, (int) round($baseHours * (1 / $slowdown)));
            // Apply buff system throughput modifiers
            $effective = app(BuffSystem::class)->modifyTaskThroughput($simulation,$effective);
            $task->remaining_hours = max(0, $task->remaining_hours - $effective);
            if ($task->remaining_hours === 0) { $task->status = 'done'; }
            $task->save();
        }

        // 2. Reset team capacity, handle sickness & recovery
        foreach ($simulation->teamMembers as $m) {
            $m->remaining_hours_today = $m->capacity_hours_per_day;
            if ($m->availability_status === 'available' && rand(1,100) <= 5) {
                $this->createEvent($simulation,'sickness',[ 'member_id' => $m->id, 'name' => $m->name, 'impact' => 'capacity_loss' ]);
                $m->availability_status = 'sick';
            } elseif ($m->availability_status === 'sick' && rand(1,100) <= 40) {
                $m->availability_status = 'available';
            }
            $m->save();
        }

        // 3. Generate workflow automation tasks (25% chance daily)
        if (rand(1,100) <= 25) {
            $this->generateWorkflowTasks($simulation);
        }

        // 4. Random impactful events (increased frequency)
        $roll = rand(1,100);
        if ($roll <= 45) { // increased from 35% to 45%
            $this->generateRandomEvent($simulation);
        }

        // 5. Advance timeboxed day (no early completion on 100% progress)
        if ($simulation->status === 'active') {
            $simulation->current_day += 1;
            if ($simulation->current_day >= $simulation->total_days) {
                // Reached or exceeded final day in test span
                $this->evaluate($simulation,true);
            } else {
                $simulation->save();
            }
        }
        
        // Award daily XP (small) after advancing day (even if evaluation triggered it will persist)
        $this->grantXp($simulation, 10, 'daily_progress');
    }

    /**
     * Generate workflow automation tasks based on project context
     */
    protected function generateWorkflowTasks(VirtualProjectSimulation $simulation): void
    {
        $domain = strtolower($simulation->meta['domain'] ?? 'general');
        $workflowTasks = [];

        // Domain-specific workflow patterns
        $workflows = match(true) {
            str_contains($domain, 'healthcare') => [
                'Setup patient data validation workflow',
                'Implement automated appointment reminders',
                'Configure medical record backup automation',
                'Setup compliance audit trail workflow',
                'Automate prescription refill notifications'
            ],
            str_contains($domain, 'finance') || str_contains($domain, 'banking') => [
                'Setup automated transaction monitoring',
                'Implement fraud detection workflow',
                'Configure compliance reporting automation',
                'Setup automated invoice processing',
                'Implement risk assessment workflow'
            ],
            str_contains($domain, 'retail') || str_contains($domain, 'ecommerce') => [
                'Setup inventory reorder automation',
                'Implement order fulfillment workflow',
                'Configure abandoned cart recovery',
                'Setup customer review automation',
                'Implement price monitoring workflow'
            ],
            str_contains($domain, 'manufacturing') => [
                'Setup quality control workflow',
                'Implement maintenance scheduling automation',
                'Configure supply chain monitoring',
                'Setup production line alerts',
                'Implement safety compliance automation'
            ],
            str_contains($domain, 'education') => [
                'Setup automated grading workflow',
                'Implement student progress tracking',
                'Configure parent notification system',
                'Setup course material distribution',
                'Implement attendance monitoring'
            ],
            str_contains($domain, 'real estate') => [
                'Setup property listing automation',
                'Implement client follow-up workflow',
                'Configure market analysis reports',
                'Setup appointment scheduling automation',
                'Implement contract management workflow'
            ],
            default => [
                'Setup automated testing workflow',
                'Implement CI/CD pipeline automation',
                'Configure deployment workflow',
                'Setup monitoring and alerting',
                'Implement backup automation workflow',
                'Configure user notification system',
                'Setup data synchronization workflow',
                'Implement automated reporting'
            ]
        };

        // Select 1-3 random workflow tasks
        $selected = collect($workflows)->random(rand(1, min(3, count($workflows))));
        
        foreach ($selected as $workflowTitle) {
            SimulationTask::create([
                'simulation_id' => $simulation->id,
                'title' => $workflowTitle,
                'estimated_hours' => rand(4, 12),
                'remaining_hours' => rand(4, 12),
                'priority' => collect(['medium', 'high'])->random(),
                'skill_tags' => ['automation', 'workflow', 'integration'],
                'created_via' => 'workflow_automation',
                'status' => 'todo',
            ]);
        }

        if ($selected->isNotEmpty()) {
            $this->createEvent($simulation, 'workflow_automation', [
                'tasks_generated' => $selected->count(),
                'focus_area' => $domain,
                'automation_type' => 'workflow_optimization'
            ]);
        }

        $this->ensureBaselineHours($simulation);
    }

    /**
     * Generate random events with better variety
     */
    protected function generateRandomEvent(VirtualProjectSimulation $simulation): void
    {
        $catalog = [
            // type => generator closure returning [payload, effectCallable]
            'requirement_change' => function() use ($simulation) {
                return [
                    ['note' => 'Stakeholder adds export reports feature', 'added_hours' => rand(6,14)],
                    function() use ($simulation) { $this->inflateRandomTasks($simulation, 2, rand(2,6)); }
                ];
            },
            'scope_creep' => function() use ($simulation) {
                return [
                    ['note' => 'Minor UX polish requests accumulate', 'percent_increase' => 10],
                    function() use ($simulation) { $this->percentAdjustAllPending($simulation, 0.10); }
                ];
            },
                'dependency_block' => function() {
                    return [
                        ['blocked_area' => collect(['Payments API','Auth service','3rd-party analytics'])->random(), 'days' => rand(1,3)],
                        function() { /* effect applied on task slowdown flag */ }
                    ];
                },
                'budget_cut' => function() use ($simulation) {
                    $cut = rand(1000,4000);
                    return [
                        ['cut' => $cut],
                        function() use ($simulation, $cut) { $simulation->budget_total = max(0, $simulation->budget_total - $cut); $simulation->save(); }
                    ];
                },
                'vendor_delay' => function() {
                    return [
                        ['vendor' => collect(['Email provider','Cloud hosting','Payment gateway'])->random(), 'days' => rand(2,5)],
                        function() { }
                    ];
                },
                'performance_issue' => function() use ($simulation) {
                    return [
                        ['area' => collect(['Search queries','Checkout flow','Dashboard load'])->random(), 'investigation_hours' => rand(4,10)],
                        function() use ($simulation) { $this->injectNewTask($simulation,'Investigate performance regression'); }
                    ];
                },
                'security_alert' => function() use ($simulation) {
                    return [
                        ['severity' => collect(['low','medium','high'])->random()],
                        function() use ($simulation) { $this->injectNewTask($simulation,'Apply security patch & review dependencies','high'); }
                    ];
                },
                'team_conflict' => function() {
                    return [
                        ['note' => 'Misalignment between frontend & backend expectations','morale_drop' => rand(5,15)],
                        function() { }
                    ];
                },
                'client_feedback' => function() use ($simulation) {
                    $concern = collect(['UI not intuitive','Performance concerns','Missing features','Integration issues'])->random();
                    return [
                        ['concern' => $concern, 'urgency' => collect(['low','medium','high'])->random()],
                        function() use ($simulation) { /* stakeholder satisfaction impact handled in response */ }
                    ];
                },
                'quality_issue' => function() use ($simulation) {
                    $issue = collect(['Code complexity','Test coverage gaps','Technical debt','Architecture concerns'])->random();
                    return [
                        ['issue_type' => $issue, 'severity' => collect(['minor','major','critical'])->random()],
                        function() use ($simulation) { /* quality metrics impact */ }
                    ];
                },
                'resource_unavailable' => function() use ($simulation) {
                    $resource = collect(['Senior developer','UI designer','Database expert','DevOps engineer'])->random();
                    return [
                        ['resource_type' => $resource, 'duration' => rand(2,7).' days', 'reason' => collect(['sick leave','other project','vacation','training'])->random()],
                        function() use ($simulation) { /* capacity impact */ }
                    ];
                },
                'technology_risk' => function() {
                    $risk = collect(['Library deprecation','API changes','Security vulnerability','Compatibility issues'])->random();
                    return [
                        ['risk_type' => $risk, 'impact' => collect(['low','medium','high'])->random(), 'timeline' => rand(1,4).' weeks'],
                        function() { /* tech debt or rework needed */ }
                    ];
                },
                'stakeholder_pressure' => function() {
                    $pressure = collect(['Accelerate timeline','Add features','Cut costs','Change priorities'])->random();
                    return [
                        ['pressure_type' => $pressure, 'source' => collect(['CEO','Product owner','Client','Marketing'])->random()],
                        function() { /* pressure creates constraints */ }
                    ];
                },
                'market_change' => function() {
                    $change = collect(['Competitor launch','Regulatory change','Technology shift','Customer behavior'])->random();
                    return [
                        ['change_type' => $change, 'impact' => collect(['minor','significant','major'])->random(), 'response_needed' => rand(1,3).' weeks'],
                        function() { /* strategic implications */ }
                    ];
                },
                'integration_failure' => function() use ($simulation) {
                    $system = collect(['Payment gateway','Email service','Analytics platform','Authentication service'])->random();
                    return [
                        ['system' => $system, 'downtime' => rand(2,24).' hours', 'user_impact' => collect(['low','medium','high'])->random()],
                        function() use ($simulation, $system) { $this->injectNewTask($simulation,'Fix integration failure: '.$system, 'high'); }
                    ];
                },
                'data_issue' => function() use ($simulation) {
                    $issue = collect(['Data corruption','Migration failure','Backup problems','Sync issues'])->random();
                    return [
                        ['issue_type' => $issue, 'affected_records' => rand(100,10000), 'severity' => collect(['low','medium','critical'])->random()],
                        function() use ($simulation) { $this->injectNewTask($simulation,'Resolve data integrity issue', 'high'); }
                    ];
                },
                'compliance_requirement' => function() use ($simulation) {
                    $requirement = collect(['GDPR audit','Security certification','Accessibility compliance','Industry regulation'])->random();
                    return [
                        ['requirement_type' => $requirement, 'deadline' => rand(2,8).' weeks', 'complexity' => collect(['simple','moderate','complex'])->random()],
                        function() use ($simulation) { $this->injectNewTask($simulation,'Address compliance requirement: '.$requirement, 'medium'); }
                    ];
                },
                'infrastructure_issue' => function() use ($simulation) {
                    $issue = collect(['Server outage','Network latency','Storage capacity','CDN problems'])->random();
                    return [
                        ['issue_type' => $issue, 'duration' => rand(1,12).' hours', 'user_impact' => collect(['minor','moderate','severe'])->random()],
                        function() use ($simulation) { $this->injectNewTask($simulation,'Resolve infrastructure issue', 'high'); }
                    ];
                }
            ];
            
            $chosenKey = collect(array_keys($catalog))->random();
            [$payload,$effect] = $catalog[$chosenKey]();
            $event = $this->createEvent($simulation,$chosenKey,$payload);
            // Apply effect after persisting event
            if (is_callable($effect)) { $effect(); }
        }

        // 5. Advance timeboxed day (no early completion on 100% progress)
        if ($simulation->status === 'active') {
            $simulation->current_day += 1;
            if ($simulation->current_day >= $simulation->total_days) {
                // Reached or exceeded final day in test span
                $this->evaluate($simulation,true);
            } else {
                $simulation->save();
            }
        }
        
        // Award daily XP (small) after advancing day (even if evaluation triggered it will persist)
        $this->grantXp($simulation, 10, 'daily_progress');
    }


    /* ---------- Helper Effects & Presentation ---------- */
    protected function inflateRandomTasks(VirtualProjectSimulation $simulation,int $count,int $extraHours): void
    {
        $tasks = $simulation->tasks()->whereIn('status',['todo','in_progress'])->inRandomOrder()->limit($count)->get();
        foreach ($tasks as $t) {
            $t->remaining_hours += $extraHours;
            $t->estimated_hours += $extraHours;
            $t->save();
        }
    }

    protected function percentAdjustAllPending(VirtualProjectSimulation $simulation,float $percent): void
    {
        foreach ($simulation->tasks()->whereIn('status',['todo','in_progress'])->get() as $t) {
            $delta = (int) ceil($t->estimated_hours * $percent);
            $t->estimated_hours += $delta;
            $t->remaining_hours += $delta;
            $t->save();
        }
    }

    protected function injectNewTask(VirtualProjectSimulation $simulation,string $title,string $priority = 'medium'): void
    {
        SimulationTask::create([
            'simulation_id' => $simulation->id,
            'title' => $title,
            'estimated_hours' => rand(3,7),
            'remaining_hours' => rand(3,7),
            'priority' => $priority,
            'skill_tags' => ['general'],
            'created_via' => 'event'
        ]);
    $this->ensureBaselineHours($simulation); // recalc if baseline missing
    }

    public function humanizeEvent(string $type,array $payload): string
    {
        return match($type) {
            'sickness' => ($payload['name'] ?? 'A team member')." reported sick. Capacity reduced.",
            'workflow_automation' => 'New automation opportunities identified. '.($payload['tasks_generated'] ?? '?').' workflow tasks added for '.($payload['focus_area'] ?? 'system').' optimization.',
            'requirement_change' => 'New requirement added: '.($payload['note'] ?? 'unspecified feature').'. Additional effort required.',
            'scope_creep' => 'Scope creep: minor enhancements increasing workload by '.($payload['percent_increase'] ?? '?').'%.' ,
            'dependency_block' => 'Dependency block: '.($payload['blocked_area'] ?? 'External service').' blocked for '.($payload['days'] ?? '?').' day(s).',
            'budget_cut' => 'Budget cut of $'.($payload['cut'] ?? '?').'. Adjust plan accordingly.',
            'vendor_delay' => 'Vendor delay: '.($payload['vendor'] ?? 'Vendor').' will slip '.($payload['days'] ?? '?').' day(s).',
            'performance_issue' => 'Performance issue discovered in '.($payload['area'] ?? 'system').', investigation task created.',
            'security_alert' => 'Security alert ('.($payload['severity'] ?? 'unknown').') – patch task generated.',
            'team_conflict' => 'Team conflict causing morale dip – facilitate alignment meeting.',
            'client_feedback' => 'Client feedback received: '.($payload['concern'] ?? 'concerns raised').' (urgency: '.($payload['urgency'] ?? 'medium').').',
            'quality_issue' => 'Quality issue identified: '.($payload['issue_type'] ?? 'code quality').' (severity: '.($payload['severity'] ?? 'medium').').',
            'resource_unavailable' => 'Resource unavailable: '.($payload['resource_type'] ?? 'team member').' for '.($payload['duration'] ?? 'unknown time').' ('.($payload['reason'] ?? 'unspecified').').',
            'technology_risk' => 'Technology risk detected: '.($payload['risk_type'] ?? 'technical issue').' (impact: '.($payload['impact'] ?? 'unknown').').',
            'stakeholder_pressure' => 'Stakeholder pressure: '.($payload['pressure_type'] ?? 'demands').' from '.($payload['source'] ?? 'stakeholder').'.',
            'market_change' => 'Market change: '.($payload['change_type'] ?? 'market shift').' (impact: '.($payload['impact'] ?? 'unknown').').',
            'integration_failure' => 'Integration failure: '.($payload['system'] ?? 'external system').' down for '.($payload['downtime'] ?? 'unknown time').'.',
            'data_issue' => 'Data issue: '.($payload['issue_type'] ?? 'data problem').' affecting '.($payload['affected_records'] ?? '?').' records.',
            'compliance_requirement' => 'Compliance requirement: '.($payload['requirement_type'] ?? 'regulatory compliance').' due in '.($payload['deadline'] ?? 'unknown time').'.',
            'infrastructure_issue' => 'Infrastructure issue: '.($payload['issue_type'] ?? 'system problem').' causing '.($payload['user_impact'] ?? 'unknown').' user impact.',
            default => ucfirst(str_replace('_',' ', $type)).' event occurred.'
        ];
    }

    protected function ensureBaselineHours(VirtualProjectSimulation $simulation): void
    {
        $metrics = $simulation->metrics ?? [];
        if (!isset($metrics['baseline_hours'])) {
            $total = (int) $simulation->tasks()->sum('estimated_hours');
            $metrics['baseline_hours'] = max(1,$total);
            $simulation->metrics = $metrics;
            $simulation->save();
        }
    }

    // Override createEvent to auto-humanize if missing
    public function createEvent(VirtualProjectSimulation $simulation,string $type,array $payload = []): SimulationEvent
    {
        if (!isset($payload['human'])) {
            $payload['human'] = $this->humanizeEvent($type,$payload);
        }
        // Attach standardized response option metadata for UI (lightweight DSL)
        $payload['options'] = $payload['options'] ?? $this->defaultResponseOptions($type, $payload);
    $event = SimulationEvent::create([
            'simulation_id' => $simulation->id,
            'type' => $type,
            'payload' => $payload,
            'day_triggered' => $simulation->current_day,
        ]);
    return $event;
    }

    /**
     * Provide default response option descriptors for popup actions.
     * Each option: key,label,description,response(optional override),input(optional: {type,min,max,default,label})
     */
    protected function defaultResponseOptions(string $type, array $payload): array
    {
        return match($type) {
            'workflow_automation' => [
                ['key'=>'prioritize_automation','label'=>'Prioritize Automation Tasks','description'=>'Focus team on automation for long-term efficiency gains (+15% future velocity, -10% current sprint capacity)'],
                ['key'=>'defer_automation','label'=>'Defer to Next Phase','description'=>'Postpone automation to focus on core deliverables (+5% current sprint capacity, -future efficiency gains)'],
                ['key'=>'hybrid_approach','label'=>'Gradual Implementation','description'=>'Implement automation incrementally alongside core work (balanced approach, moderate benefits)'],
                ['key'=>'outsource_automation','label'=>'Outsource Automation Setup','description'=>'Hire specialists for automation implementation (-$3000 budget, +automation expertise, no team capacity impact)'],
            ],
            'sickness' => [
                ['key'=>'check_in','label'=>'Check In & Provide Support','description'=>'Show care for team member; boost morale, maintain team cohesion (+5 morale, -$100 wellness budget)'],
                ['key'=>'reassign_work','label'=>'Reassign Critical Tasks','description'=>'Redistribute workload to maintain velocity (-10% team capacity, -5 morale, maintain timeline)'],
                ['key'=>'hire_temporary','label'=>'Hire Temporary Contractor','description'=>'Pay for contract support to maintain capacity (-$2500 budget, +3 days setup time, maintain velocity)'],
                ['key'=>'adjust_timeline','label'=>'Adjust Timeline & Communicate','description'=>'Extend deadlines transparently with stakeholders (+5 days, -15 client satisfaction, +5 team morale)'],
                ['key'=>'cross_training','label'=>'Emergency Cross-Training','description'=>'Train another team member on sick member\'s tasks (-$800, -2 days productivity, +10 future resilience)'],
            ],
            'budget_cut' => [
                ['key'=>'reduce_scope','label'=>'Strategic Scope Reduction','description'=>'Trim non-critical features collaboratively (-20% scope, maintain quality, -10 client satisfaction)'],
                ['key'=>'seek_additional_funds','label'=>'Seek Emergency Funding','description'=>'Present business case for additional budget (50% success chance, -5 morale during uncertainty)'],
                ['key'=>'reallocate_budget','label'=>'Optimize Budget Allocation','description'=>'Review and reallocate existing budget pools (+10% available budget, -1 day planning time)'],
                ['key'=>'negotiate_timeline','label'=>'Negotiate Extended Timeline','description'=>'Extend project duration to reduce daily burn rate (+15% timeline, -20 client satisfaction, -$500/day savings)'],
                ['key'=>'value_engineering','label'=>'Value Engineering Workshop','description'=>'Redesign approach for cost efficiency (-3 days, potential 15% cost savings, +5 team learning)'],
            ],
            'requirement_change' => [
                ['key'=>'accept_change','label'=>'Accept Change Gracefully','description'=>'Absorb added scope with positive attitude (+15 scope, +10 client satisfaction, -5% velocity)'],
                ['key'=>'negotiate_tradeoff','label'=>'Negotiate Equivalent Trade-off','description'=>'Remove lower-value features for new ones (scope neutral, -5 client satisfaction, maintain timeline)'],
                ['key'=>'defer_next_phase','label'=>'Defer to Future Phase','description'=>'Document change for next iteration (-25 client satisfaction, maintain current scope)'],
                ['key'=>'impact_analysis','label'=>'Comprehensive Impact Analysis','description'=>'Analyze all implications before deciding (-2 days, +detailed planning, better decision quality)'],
                ['key'=>'change_board_review','label'=>'Formal Change Board Review','description'=>'Establish governance process for future changes (-1 day setup, +change control, +5 process maturity)'],
            ],
            'scope_creep' => [
                ['key'=>'accept_minor','label'=>'Accept Minor Additions','description'=>'Accommodate small changes to maintain relationships (+5% scope, +5 client satisfaction, -2% velocity)'],
                ['key'=>'push_back','label'=>'Firmly Push Back','description'=>'Protect scope baseline with clear communication (scope protected, -10 client satisfaction, +team clarity)'],
                ['key'=>'prioritize_core','label'=>'Re-Prioritize Core Features','description'=>'Adjust feature priorities to accommodate (-3% low-priority scope, +2% high-priority focus)'],
                ['key'=>'change_control','label'=>'Implement Change Control Process','description'=>'Establish formal change management (-1 day setup, prevents future creep, +governance maturity)'],
                ['key'=>'scope_buffer','label'=>'Use Scope Buffer','description'=>'Utilize planned contingency scope (if available, absorb change without impact)'],
            ],
            'dependency_block' => [
                ['key'=>'expedite_dependency','label'=>'Expedite External Dependency','description'=>'Pay premium to accelerate blocker (-$3000, -5 days delay, maintain project timeline)'],
                ['key'=>'resequence','label'=>'Resequence Task Order','description'=>'Adjust plan to work around blockage (-1 day replanning, +alternative path, slight efficiency loss)'],
                ['key'=>'wait_monitor','label'=>'Wait & Monitor Closely','description'=>'Take no action but increase communication (+tracking overhead, risk of team idle time)'],
                ['key'=>'alternative_solution','label'=>'Develop Alternative Solution','description'=>'Create workaround or different approach (-3 days research, removes dependency, +technical debt risk)'],
                ['key'=>'parallel_workstream','label'=>'Create Parallel Workstream','description'=>'Start alternative path while waiting (-15% team capacity, +project flexibility)'],
            ],
            'performance_issue' => [
                ['key'=>'investigate_now','label'=>'Immediate Investigation','description'=>'Allocate team time to diagnose root cause (-2 days, +understanding, prevents bigger issues)'],
                ['key'=>'schedule_later','label'=>'Schedule for Later Sprint','description'=>'Defer performance work to maintain feature velocity (potential 10% future slowdown risk)'],
                ['key'=>'allocate_perf_sprint','label'=>'Dedicated Performance Sprint','description'=>'Invest in optimization work (-$2000, -5 days, +30% future throughput)'],
                ['key'=>'optimize_architecture','label'=>'Architectural Optimization','description'=>'Major system redesign for performance (-$8000, -10 days, +50% long-term efficiency)'],
                ['key'=>'monitoring_setup','label'=>'Enhanced Monitoring Setup','description'=>'Implement performance tracking (-$1500, -2 days, +early warning system)'],
            ],
            'security_alert' => [
                ['key'=>'patch_immediately','label'=>'Emergency Patch Deployment','description'=>'Immediate security fix with all-hands effort (-1 day all tasks, +security confidence, +stakeholder trust)'],
                ['key'=>'schedule_patch','label'=>'Scheduled Patch Window','description'=>'Plan patch in next maintenance window (-3 days to patch, slight security exposure risk)'],
                ['key'=>'risk_acceptance','label'=>'Documented Risk Acceptance','description'=>'Accept risk with stakeholder approval (no immediate cost, potential future impact)'],
                ['key'=>'security_audit','label'=>'Comprehensive Security Review','description'=>'Full security assessment and remediation (-$5000, -7 days, +security maturity)'],
                ['key'=>'incident_response','label'=>'Activate Incident Response','description'=>'Full security protocol activation (-2 days, +stakeholder confidence, +process maturity)'],
            ],
            'team_conflict' => [
                ['key'=>'mediate_immediately','label'=>'Immediate Mediation Session','description'=>'Personal intervention to resolve conflict (-0.5 day, +team harmony, +leadership credibility)'],
                ['key'=>'team_building','label'=>'Organize Team Building Activity','description'=>'Invest in team cohesion activities (-$800, -1 day, +15 team morale, +collaboration)'],
                ['key'=>'separate_work_streams','label'=>'Separate Conflicting Members','description'=>'Reorganize work to minimize interaction (-5% efficiency, conflict contained)'],
                ['key'=>'hr_involvement','label'=>'Involve HR/Management','description'=>'Escalate for professional resolution (-1 day process, formal resolution, potential team awkwardness)'],
                ['key'=>'coaching_support','label'=>'Provide Conflict Resolution Coaching','description'=>'Skill-building approach (-$1200, +conflict resolution skills, long-term team benefit)'],
            ],
            'stakeholder_pressure' => [
                ['key'=>'transparent_communication','label'=>'Full Transparency Meeting','description'=>'Present complete project status honestly (+stakeholder trust, realistic expectations, possible timeline pressure)'],
                ['key'=>'quick_wins','label'=>'Deliver Quick Wins','description'=>'Accelerate visible progress items (-10% efficiency on other tasks, +stakeholder confidence)'],
                ['key'=>'escalate_sponsor','label'=>'Escalate to Executive Sponsor','description'=>'Seek senior leadership support (potential relief from pressure or increased scrutiny)'],
                ['key'=>'demo_intermediate','label'=>'Schedule Intermediate Demo','description'=>'Show progress with prototype/demo (-1 day prep, +stakeholder engagement, manage expectations)'],
                ['key'=>'stakeholder_workshop','label'=>'Collaborative Planning Workshop','description'=>'Involve stakeholders in solution design (-2 days, +buy-in, +shared ownership of outcomes)'],
            ],
            'stakeholder_pressure' => [
                ['key'=>'transparent_communication','label'=>'Full Transparency Meeting','description'=>'Present complete project status honestly (+stakeholder trust, realistic expectations, possible timeline pressure)'],
                ['key'=>'quick_wins','label'=>'Deliver Quick Wins','description'=>'Accelerate visible progress items (-10% efficiency on other tasks, +stakeholder confidence)'],
                ['key'=>'escalate_sponsor','label'=>'Escalate to Executive Sponsor','description'=>'Seek senior leadership support (potential relief from pressure or increased scrutiny)'],
                ['key'=>'demo_intermediate','label'=>'Schedule Intermediate Demo','description'=>'Show progress with prototype/demo (-1 day prep, +stakeholder engagement, manage expectations)'],
                ['key'=>'stakeholder_workshop','label'=>'Collaborative Planning Workshop','description'=>'Involve stakeholders in solution design (-2 days, +buy-in, +shared ownership of outcomes)'],
            ],
            'client_feedback' => [
                ['key'=>'address_immediately','label'=>'Address Immediately','description'=>'Create urgent task to resolve client concerns (+client satisfaction, -project efficiency)'],
                ['key'=>'schedule_review','label'=>'Schedule Review Meeting','description'=>'Plan structured discussion of feedback (+client engagement, maintains timeline)'],
                ['key'=>'gather_more_info','label'=>'Gather More Information','description'=>'Research and understand the feedback thoroughly (better decision quality, slight delay)'],
                ['key'=>'pushback_politely','label'=>'Pushback Politely','description'=>'Respectfully explain constraints and alternatives (maintains scope, may reduce satisfaction)'],
            ],
            'vendor_delay' => [
                ['key'=>'find_alternative','label'=>'Find Alternative Vendor','description'=>'Source replacement vendor quickly (-$1000-2500, +project continuity, integration complexity)'],
                ['key'=>'apply_pressure','label'=>'Apply Pressure','description'=>'Escalate with vendor management (60% chance success, risk vendor relationship damage)'],
                ['key'=>'adjust_timeline','label'=>'Adjust Project Timeline','description'=>'Extend project to accommodate delay (+1-3 days, -stakeholder satisfaction)'],
                ['key'=>'parallel_development','label'=>'Parallel Development','description'=>'Develop alternative solution while waiting (+technical complexity, insurance against delays)'],
            ],
            'quality_issue' => [
                ['key'=>'immediate_fix','label'=>'Immediate Fix','description'=>'Create urgent task to resolve quality issue (+technical quality, -short-term velocity)'],
                ['key'=>'schedule_refactor','label'=>'Schedule Refactoring','description'=>'Plan systematic improvement in next iteration (+long-term quality, maintains timeline)'],
                ['key'=>'accept_technical_debt','label'=>'Accept Technical Debt','description'=>'Acknowledge issue for future resolution (maintains velocity, accumulates debt)'],
                ['key'=>'quality_review','label'=>'Comprehensive Quality Review','description'=>'Invest in thorough quality assessment (-$800-1500, +technical quality insights)'],
            ],
            'resource_unavailable' => [
                ['key'=>'find_substitute','label'=>'Find Substitute Resource','description'=>'Source replacement team member (-$1200-2500, +team capacity, onboarding time)'],
                ['key'=>'delay_dependent_tasks','label'=>'Delay Dependent Tasks','description'=>'Reschedule work requiring unavailable resource (+2 days timeline, -team morale)'],
                ['key'=>'skill_transfer','label'=>'Emergency Skill Transfer','description'=>'Cross-train existing team member (+team skills, short-term productivity loss)'],
                ['key'=>'outsource_work','label'=>'Outsource Work','description'=>'Contract external provider for specific tasks (-$2000-4000, +external dependencies)'],
            ],
            'technology_risk' => [
                ['key'=>'mitigate_now','label'=>'Mitigate Immediately','description'=>'Create urgent task to address technology risk (-technical risk, resource allocation)'],
                ['key'=>'monitor_closely','label'=>'Monitor Closely','description'=>'Increase monitoring and tracking of risk factors (+risk awareness, reactive approach)'],
                ['key'=>'contingency_plan','label'=>'Develop Contingency Plan','description'=>'Create backup strategy for risk scenarios (+risk preparedness, planning overhead)'],
                ['key'=>'technology_pivot','label'=>'Technology Platform Pivot','description'=>'Major change to different technology (-$3000-6000, -technical risk, significant rework)'],
            ],
            'integration_failure' => [
                ['key'=>'immediate_fix','label'=>'Emergency Integration Repair','description'=>'All-hands effort to restore integration (-system reliability impact, fast resolution)'],
                ['key'=>'temporary_workaround','label'=>'Temporary Workaround','description'=>'Quick fix to restore functionality (+immediate relief, +technical debt)'],
                ['key'=>'rollback_changes','label'=>'Rollback Recent Changes','description'=>'Revert to last known working state (+stability, potential feature loss)'],
            ],
            'data_issue' => [
                ['key'=>'immediate_recovery','label'=>'Immediate Data Recovery','description'=>'Emergency effort to restore data integrity (+data integrity, resource intensive)'],
                ['key'=>'scheduled_maintenance','label'=>'Scheduled Data Maintenance','description'=>'Plan systematic data repair in maintenance window (less disruptive, longer resolution)'],
                ['key'=>'accept_data_loss','label'=>'Accept Limited Data Loss','description'=>'Move forward with acceptable data loss (-data quality, -stakeholder satisfaction)'],
            ],
            'compliance_requirement' => [
                ['key'=>'immediate_compliance','label'=>'Immediate Compliance Implementation','description'=>'Urgent task to meet compliance requirement (+compliance score, resource reallocation)'],
                ['key'=>'phased_approach','label'=>'Phased Compliance Approach','description'=>'Systematic implementation over time (+compliance score, manageable workload)'],
                ['key'=>'seek_extension','label'=>'Request Deadline Extension','description'=>'Negotiate more time for proper implementation (40% success chance, risk if denied)'],
            ],
            'infrastructure_issue' => [
                ['key'=>'emergency_fix','label'=>'Emergency Infrastructure Repair','description'=>'Immediate resolution with premium resources (-$500-1500, +system uptime)'],
                ['key'=>'scheduled_maintenance','label'=>'Scheduled Maintenance','description'=>'Plan systematic infrastructure improvement (less costly, longer resolution time)'],
                ['key'=>'temporary_mitigation','label'=>'Temporary Mitigation','description'=>'Quick workaround to reduce impact (+immediate relief, +infrastructure risk)'],
            ],
            'market_change' => [
                ['key'=>'pivot_strategy','label'=>'Pivot Strategy','description'=>'Major change to address market shift; disruption but relevance.'],
                ['key'=>'accelerate_delivery','label'=>'Accelerate Delivery','description'=>'Rush to market; quality risk but timing advantage.'],
                ['key'=>'pause_reassess','label'=>'Pause and Reassess','description'=>'Take time to understand impact; delay but informed decision.'],
                ['key'=>'continue_as_planned','label'=>'Continue As Planned','description'=>'Stick to original plan; risk of market mismatch.'],
            ],
            default => [
                ['key'=>'acknowledge','label'=>'Acknowledge & Monitor','description'=>'Take note of the issue and continue monitoring'],
                ['key'=>'investigate','label'=>'Investigate Further','description'=>'Spend time to understand the situation better'],
                ['key'=>'escalate','label'=>'Escalate to Management','description'=>'Bring the issue to higher management attention'],
            ]
        };
    }

    /**
     * Evaluate simulation for completion & scoring.
     * @param bool $force when true completes even if tasks not 100% (timeboxed end)
     */
    public function evaluate(VirtualProjectSimulation $simulation,bool $force = false): void
    {
        if ($simulation->status !== 'active') { return; }
        $tasks = $simulation->tasks; // already loaded often
        $totalHours = max(1,$tasks->sum('estimated_hours'));
        $completedHours = $tasks->where('status','done')->sum('estimated_hours');
        $progressPct = (int) round(($completedHours / $totalHours) * 100);
        // Only evaluate at forced timebox end now
        if (!$force) { return; }

        // Compute scoring dimensions
        $metrics = $simulation->metrics ?? [];
        $baseline = $metrics['baseline_hours'] ?? $totalHours; // fallback
        $scopeGrowthPct = $baseline ? (($totalHours - $baseline) / $baseline) * 100 : 0;
        $morale = $metrics['morale'] ?? 70;
        $budgetEfficiency = $simulation->budget_total > 0 ? 1 - ($simulation->budget_used / max(1,$simulation->budget_total)) : 0; // remaining ratio
        $daysUsed = $simulation->current_day;
        $timeEfficiency = $simulation->total_days > 0 ? (1 - ($daysUsed / $simulation->total_days)) : 0; // earlier finish better; if forced end will be <=0
        $actions = $simulation->actions()->get();
        $actionCount = $actions->count();
        $actionVariety = $actions->pluck('type')->unique()->count();
        $events = $simulation->events()->count();

        // Convert to 0-100 sub-scores
        $scoreMorale = max(0,min(100,$morale));
        $scoreBudget = max(0,min(100, round($budgetEfficiency * 100)));
        $scoreScope = (int) max(0, 100 - min(100, abs($scopeGrowthPct))); // less change better
    $scoreTime = (int) max(0, min(100, round($timeEfficiency * 100))); // no early finish bonus (timebox evaluation)
        $scoreLeadership = min(100, ($actionCount * 8) + ($actionVariety * 5));
        $scoreResponsiveness = $events ? min(100, round(($actionCount / $events) * 100)) : 60; // baseline if no events

        $weights = [
            'morale' => 0.18,
            'budget' => 0.20,
            'scope' => 0.14,
            'time' => 0.18,
            'leadership' => 0.15,
            'responsiveness' => 0.15,
        ];
        $final = (int) round(
            $scoreMorale * $weights['morale'] +
            $scoreBudget * $weights['budget'] +
            $scoreScope * $weights['scope'] +
            $scoreTime * $weights['time'] +
            $scoreLeadership * $weights['leadership'] +
            $scoreResponsiveness * $weights['responsiveness']
        );

        $breakdown = [
            'progress_pct' => $progressPct,
            'scores' => [
                'morale' => $scoreMorale,
                'budget' => $scoreBudget,
                'scope_stability' => $scoreScope,
                'time_efficiency' => $scoreTime,
                'leadership_actions' => $scoreLeadership,
                'responsiveness' => $scoreResponsiveness,
            ],
            'weights' => $weights,
            'raw' => [
                'morale' => $morale,
                'budget_remaining' => $simulation->budget_total - $simulation->budget_used,
                'scope_growth_pct' => round($scopeGrowthPct,1),
                'days_used' => $daysUsed,
                'action_count' => $actionCount,
                'action_variety' => $actionVariety,
                'events' => $events,
            ],
            'final_score' => $final,
            'finished_reason' => 'time_exhausted',
        ];

        $metrics['evaluation'] = $breakdown;
        $simulation->metrics = $metrics;
        $simulation->score = $final;
        $simulation->status = 'completed';
        $simulation->end_date = now();
        $simulation->save();
        // Bonus XP for completion based on final score
        $this->grantXp($simulation, (int) max(20, round($final/5)), 'simulation_completion');
    }

    /**
     * Grant XP with leveling; public so controllers can award on user actions.
     */
    public function grantXp(VirtualProjectSimulation $simulation, int $amount, string $reason = 'action'): void
    {
        if ($amount <= 0) { return; }
        $metrics = $simulation->metrics ?? [];
        $metrics['xp'] = ($metrics['xp'] ?? 0) + $amount;
        $metrics['xp_log'][] = ['amt'=>$amount,'reason'=>$reason,'day'=>$simulation->current_day,'ts'=>now()->toIso8601String()];
        // Level threshold: level * 150 XP
        $level = $metrics['level'] ?? 1;
        $changed = false;
        while ($metrics['xp'] >= $level * 150) {
            $metrics['xp'] -= $level * 150; // carry remainder forward
            $level++;
            $changed = true;
        }
        if ($changed) {
            $metrics['level'] = $level;
            $metrics['xp_log'][] = ['amt'=>0,'reason'=>'level_up','level'=>$level,'day'=>$simulation->current_day,'ts'=>now()->toIso8601String()];
        }
        $simulation->metrics = $metrics;
        $simulation->save();
    }

    /**
     * Calculate Earned Value Management (EVM) metrics for advanced project tracking
     */
    protected function calculateEVM(VirtualProjectSimulation $simulation): array
    {
        $tasks = $simulation->tasks;
        $totalPlannedValue = $tasks->sum('estimated_hours') * 50; // $50/hour baseline
        $currentDay = $simulation->current_day;
        $totalDays = $simulation->total_days;
        
        // Planned Value (PV) - what should be done by now
        $plannedValue = $totalPlannedValue * ($currentDay / $totalDays);
        
        // Earned Value (EV) - actual work completed
        $completedHours = $tasks->where('status', 'done')->sum('estimated_hours');
        $inProgressHours = $tasks->where('status', 'in_progress')->sum(function($task) {
            return max(0, $task->estimated_hours - $task->remaining_hours);
        });
        $earnedValue = ($completedHours + $inProgressHours) * 50;
        
        // Actual Cost (AC) - what has been spent
        $actualCost = $simulation->budget_used;
        
        // EVM calculations
        $costVariance = $earnedValue - $actualCost; // CV = EV - AC
        $scheduleVariance = $earnedValue - $plannedValue; // SV = EV - PV
        $costPerformanceIndex = $actualCost > 0 ? $earnedValue / $actualCost : 1; // CPI = EV / AC
        $schedulePerformanceIndex = $plannedValue > 0 ? $earnedValue / $plannedValue : 1; // SPI = EV / PV
        
        return [
            'planned_value' => round($plannedValue, 2),
            'earned_value' => round($earnedValue, 2),
            'actual_cost' => round($actualCost, 2),
            'cost_variance' => round($costVariance, 2),
            'schedule_variance' => round($scheduleVariance, 2),
            'cost_performance_index' => round($costPerformanceIndex, 3),
            'schedule_performance_index' => round($schedulePerformanceIndex, 3),
            'health_status' => $this->getEVMHealthStatus($costPerformanceIndex, $schedulePerformanceIndex)
        ];
    }

    /**
     * Update and manage project risk register
     */
    protected function updateRiskRegister(VirtualProjectSimulation $simulation, array $prevMetrics): array
    {
        $existingRisks = $prevMetrics['risks']['active'] ?? [];
        $riskUpdates = [];
        
        // Risk probability assessments based on current project state
        $budgetUtilization = $simulation->budget_total > 0 ? ($simulation->budget_used / $simulation->budget_total) : 0;
        $timeUtilization = $simulation->total_days > 0 ? ($simulation->current_day / $simulation->total_days) : 0;
        $teamMorale = $prevMetrics['morale'] ?? 70;
        
        // Dynamic risk identification
        $potentialRisks = [
            [
                'id' => 'budget_overrun',
                'probability' => min(95, max(5, $budgetUtilization * 100 + 10)),
                'impact' => 'high',
                'description' => 'Project may exceed allocated budget',
                'mitigation' => 'Implement cost controls and scope management'
            ],
            [
                'id' => 'schedule_delay',
                'probability' => min(90, max(10, ($timeUtilization * 1.2) * 100)),
                'impact' => 'high',
                'description' => 'Project delivery may be delayed',
                'mitigation' => 'Add resources or reduce scope'
            ],
            [
                'id' => 'team_burnout',
                'probability' => min(80, max(5, 100 - $teamMorale)),
                'impact' => 'medium',
                'description' => 'Team morale decline affecting productivity',
                'mitigation' => 'Implement team building and workload balance'
            ],
            [
                'id' => 'scope_creep',
                'probability' => 35,
                'impact' => 'medium',
                'description' => 'Uncontrolled expansion of project scope',
                'mitigation' => 'Establish change control process'
            ]
        ];
        
        return [
            'active' => $potentialRisks,
            'risk_score' => $this->calculateOverallRiskScore($potentialRisks),
            'mitigation_actions' => count($existingRisks),
            'trend' => $this->calculateRiskTrend($existingRisks, $potentialRisks)
        ];
    }

    /**
     * Track stakeholder satisfaction across different groups
     */
    protected function updateStakeholderMatrix(VirtualProjectSimulation $simulation, array $prevMetrics): array
    {
        $baseStakeholderSat = $prevMetrics['stakeholder_satisfaction'] ?? 80;
        
        $stakeholderGroups = [
            'executive_sponsor' => [
                'satisfaction' => min(100, max(0, $baseStakeholderSat + rand(-5, 5))),
                'influence' => 'high',
                'interest' => 'high',
                'communication_frequency' => 'weekly'
            ],
            'end_users' => [
                'satisfaction' => min(100, max(0, $baseStakeholderSat + rand(-10, 10))),
                'influence' => 'medium',
                'interest' => 'high',
                'communication_frequency' => 'bi-weekly'
            ],
            'development_team' => [
                'satisfaction' => $prevMetrics['morale'] ?? 70,
                'influence' => 'high',
                'interest' => 'high',
                'communication_frequency' => 'daily'
            ],
            'business_users' => [
                'satisfaction' => min(100, max(0, $baseStakeholderSat + rand(-8, 8))),
                'influence' => 'medium',
                'interest' => 'medium',
                'communication_frequency' => 'monthly'
            ]
        ];
        
        $overallSatisfaction = collect($stakeholderGroups)->avg('satisfaction');
        
        return [
            'groups' => $stakeholderGroups,
            'overall_satisfaction' => round($overallSatisfaction, 1),
            'communication_plan_adherence' => rand(70, 95),
            'escalations' => rand(0, 2)
        ];
    }

    /**
     * Assess team dynamics and soft skills development
     */
    protected function assessTeamDynamics(VirtualProjectSimulation $simulation, array $prevMetrics): array
    {
        $morale = $prevMetrics['morale'] ?? 70;
        $collaborationScore = $prevMetrics['team_dynamics']['collaboration'] ?? 75;
        
        // Factors affecting team dynamics
        $workloadPressure = min(100, ($simulation->current_day / $simulation->total_days) * 120);
        $budgetPressure = min(100, ($simulation->budget_used / $simulation->budget_total) * 110);
        
        return [
            'collaboration' => min(100, max(20, $collaborationScore + rand(-3, 5))),
            'communication_effectiveness' => min(100, max(30, $morale + rand(-10, 10))),
            'conflict_resolution' => min(100, max(40, 80 - ($workloadPressure * 0.3))),
            'innovation_index' => min(100, max(30, $morale * 0.8 + rand(-5, 15))),
            'knowledge_sharing' => min(100, max(40, $collaborationScore * 0.9 + rand(-5, 10))),
            'adaptability' => min(100, max(50, 85 - ($budgetPressure * 0.2))),
            'leadership_emergence' => $this->assessLeadershipEmergence($simulation, $prevMetrics)
        ];
    }

    /**
     * Track communication effectiveness across the project
     */
    protected function trackCommunicationEffectiveness(VirtualProjectSimulation $simulation, array $prevMetrics): array
    {
        $baseline = 75;
        $teamSize = count($this->team);
        $communicationComplexity = min(100, $teamSize * 8); // Complexity increases with team size
        
        return [
            'meeting_efficiency' => min(100, max(40, $baseline + rand(-15, 20))),
            'documentation_quality' => min(100, max(50, $baseline + rand(-10, 15))),
            'feedback_loops' => min(100, max(30, $baseline + rand(-20, 25))),
            'transparency_index' => min(100, max(40, $baseline + rand(-10, 20))),
            'information_flow' => min(100, max(35, 100 - $communicationComplexity + rand(-5, 15))),
            'stakeholder_alignment' => $prevMetrics['stakeholders']['overall_satisfaction'] ?? 75
        ];
    }

    /**
     * Calculate task-specific velocity considering multiple factors
     */
    protected function calculateTaskVelocity(VirtualProjectSimulation $simulation, $task, array $metrics): float
    {
        $baseVelocity = 2.5; // Base hours per day
        
        // Team capacity factor
        $teamCapacity = collect($this->team)->avg('current_capacity') / 40;
        
        // Morale impact
        $moraleMultiplier = ($metrics['morale'] ?? 70) / 70;
        
        // Complexity factor based on task priority
        $complexityMultiplier = match($task->priority) {
            'high' => 0.8,
            'medium' => 1.0,
            'low' => 1.2,
            default => 1.0
        };
        
        // Risk and external factors
        $riskMultiplier = 1.0 - (($metrics['risks']['risk_score'] ?? 0) / 200);
        $slowdownFactor = $metrics['slowdown_factor'] ?? 1.0;
        
        return $baseVelocity * $teamCapacity * $moraleMultiplier * $complexityMultiplier * $riskMultiplier * $slowdownFactor;
    }

    /**
     * Calculate detailed daily costs with breakdown
     */
    protected function calculateDailyCosts(VirtualProjectSimulation $simulation, array $metrics): array
    {
        $teamDailyCost = collect($this->team)->sum(function($member) {
            return ($member['salary_per_hour'] ?? 25) * ($member['current_capacity'] / 40) * 8;
        });
        
        $overheadCost = $teamDailyCost * 0.3; // 30% overhead
        $toolsCost = count($this->team) * 5; // $5 per person for tools/licenses
        $infrastructureCost = 50; // Base infrastructure cost
        
        // Additional costs from events/decisions
        $eventCosts = 0;
        // This would be calculated from recent event responses
        
        return [
            'team' => $teamDailyCost,
            'overhead' => $overheadCost,
            'tools' => $toolsCost,
            'infrastructure' => $infrastructureCost,
            'events' => $eventCosts,
            'total' => $teamDailyCost + $overheadCost + $toolsCost + $infrastructureCost + $eventCosts
        ];
    }

    /**
     * Generate events based on current project context and status
     */
    protected function generateContextualEvents(VirtualProjectSimulation $simulation, array $metrics, float $progress): void
    {
        if (rand(1, 100) > 25) return; // 25% chance of event
        
        $contextFactors = [
            'budget_pressure' => ($simulation->budget_used / $simulation->budget_total) > 0.7,
            'time_pressure' => ($simulation->current_day / $simulation->total_days) > 0.6,
            'low_morale' => ($metrics['morale'] ?? 70) < 50,
            'high_risk' => ($metrics['risks']['risk_score'] ?? 0) > 60,
            'stakeholder_dissatisfaction' => ($metrics['stakeholders']['overall_satisfaction'] ?? 75) < 60
        ];
        
        // Context-aware event selection
        if ($contextFactors['budget_pressure'] && rand(1, 100) <= 40) {
            $this->createEvent($simulation, 'budget_cut', ['amount' => rand(1000, 3000), 'reason' => 'cost_optimization']);
        } elseif ($contextFactors['time_pressure'] && rand(1, 100) <= 35) {
            $this->createEvent($simulation, 'stakeholder_pressure', ['type' => 'timeline_acceleration', 'urgency' => 'high']);
        } elseif ($contextFactors['low_morale'] && rand(1, 100) <= 50) {
            $this->createEvent($simulation, 'team_conflict', ['type' => 'morale_crisis', 'affected_members' => rand(2, 4)]);
        } elseif ($progress > 0 && rand(1, 100) <= 20) {
            // Positive events when progress is being made
            $this->createEvent($simulation, 'client_feedback', ['type' => 'positive', 'satisfaction_boost' => rand(5, 15)]);
        } else {
            // Default random events
            $eventTypes = ['requirement_change', 'scope_creep', 'dependency_block', 'performance_issue', 'security_alert'];
            $selectedType = $eventTypes[array_rand($eventTypes)];
            $this->createEvent($simulation, $selectedType, ['context' => 'random']);
        }
    }

    /**
     * Comprehensive project health assessment
     */
    protected function assessProjectHealth(VirtualProjectSimulation $simulation, array $metrics): array
    {
        $evm = $metrics['evm'] ?? [];
        $risks = $metrics['risks'] ?? [];
        $stakeholders = $metrics['stakeholders'] ?? [];
        $teamDynamics = $metrics['team_dynamics'] ?? [];
        
        // Individual health indicators
        $budgetHealth = ($evm['cost_performance_index'] ?? 1) >= 0.9 ? 100 : max(0, ($evm['cost_performance_index'] ?? 0.8) * 100);
        $scheduleHealth = ($evm['schedule_performance_index'] ?? 1) >= 0.9 ? 100 : max(0, ($evm['schedule_performance_index'] ?? 0.8) * 100);
        $riskHealth = max(0, 100 - ($risks['risk_score'] ?? 0));
        $stakeholderHealth = $stakeholders['overall_satisfaction'] ?? 75;
        $teamHealth = $teamDynamics['collaboration'] ?? 75;
        
        // Weighted overall score
        $overallScore = (
            $budgetHealth * 0.25 +
            $scheduleHealth * 0.25 +
            $riskHealth * 0.20 +
            $stakeholderHealth * 0.20 +
            $teamHealth * 0.10
        );
        
        return [
            'overall_score' => round($overallScore, 1),
            'budget_health' => round($budgetHealth, 1),
            'schedule_health' => round($scheduleHealth, 1),
            'risk_health' => round($riskHealth, 1),
            'stakeholder_health' => round($stakeholderHealth, 1),
            'team_health' => round($teamHealth, 1),
            'status' => $this->getHealthStatus($overallScore),
            'recommendations' => $this->generateHealthRecommendations($overallScore, $metrics)
        ];
    }

    /**
     * Check if project should be completed based on various criteria
     */
    protected function checkCompletionCriteria(VirtualProjectSimulation $simulation, array $metrics): void
    {
        $remainingWork = $simulation->tasks()->whereIn('status', ['todo', 'in_progress'])->sum('remaining_hours');
        $budgetExhausted = $simulation->budget_used >= $simulation->budget_total;
        $deadlineReached = $simulation->current_day >= $simulation->total_days;
        
        if ($remainingWork <= 0) {
            $simulation->status = 'completed';
            $simulation->end_date = now();
            $metrics['completion_reason'] = 'all_tasks_completed';
        } elseif ($budgetExhausted) {
            $simulation->status = 'completed';
            $simulation->end_date = now();
            $metrics['completion_reason'] = 'budget_exhausted';
        } elseif ($deadlineReached) {
            $simulation->status = 'completed';
            $simulation->end_date = now();
            $metrics['completion_reason'] = 'deadline_reached';
        }
        
        if ($simulation->status === 'completed') {
            $metrics['final_assessment'] = $this->generateFinalAssessment($simulation, $metrics);
        }
    }

    // Helper methods for the above functions
    protected function getEVMHealthStatus(float $cpi, float $spi): string
    {
        if ($cpi >= 1.0 && $spi >= 1.0) return 'excellent';
        if ($cpi >= 0.9 && $spi >= 0.9) return 'good';
        if ($cpi >= 0.8 || $spi >= 0.8) return 'warning';
        return 'critical';
    }

    protected function calculateOverallRiskScore(array $risks): int
    {
        return (int) collect($risks)->sum(function($risk) {
            $impactScore = match($risk['impact']) {
                'low' => 1,
                'medium' => 2,
                'high' => 3,
                default => 2
            };
            return ($risk['probability'] / 100) * $impactScore * 20;
        });
    }

    protected function calculateRiskTrend(array $oldRisks, array $newRisks): string
    {
        $oldScore = $this->calculateOverallRiskScore($oldRisks);
        $newScore = $this->calculateOverallRiskScore($newRisks);
        
        if ($newScore > $oldScore) return 'increasing';
        if ($newScore < $oldScore) return 'decreasing';
        return 'stable';
    }

    protected function assessLeadershipEmergence(VirtualProjectSimulation $simulation, array $metrics): int
    {
        $actionsCount = $simulation->actions()->count();
        $decisionQuality = $metrics['decision_quality'] ?? 75;
        return min(100, $actionsCount * 2 + $decisionQuality);
    }

    protected function getHealthStatus(float $score): string
    {
        if ($score >= 80) return 'healthy';
        if ($score >= 60) return 'at_risk';
        if ($score >= 40) return 'critical';
        return 'failing';
    }

    protected function generateHealthRecommendations(float $score, array $metrics): array
    {
        $recommendations = [];
        
        if ($score < 80) {
            $recommendations[] = 'Consider stakeholder communication improvements';
            $recommendations[] = 'Review resource allocation and team capacity';
        }
        
        if (($metrics['risks']['risk_score'] ?? 0) > 50) {
            $recommendations[] = 'Implement risk mitigation strategies';
        }
        
        if (($metrics['morale'] ?? 70) < 60) {
            $recommendations[] = 'Focus on team morale and motivation';
        }
        
        return $recommendations;
    }

    protected function generateFinalAssessment(VirtualProjectSimulation $simulation, array $metrics): array
    {
        return [
            'overall_performance' => $metrics['project_health']['overall_score'] ?? 75,
            'budget_efficiency' => $metrics['evm']['cost_performance_index'] ?? 1.0,
            'schedule_adherence' => $metrics['evm']['schedule_performance_index'] ?? 1.0,
            'stakeholder_satisfaction' => $metrics['stakeholders']['overall_satisfaction'] ?? 75,
            'team_development' => $metrics['team_dynamics']['collaboration'] ?? 75,
            'risk_management' => max(0, 100 - ($metrics['risks']['risk_score'] ?? 0)),
            'leadership_score' => $metrics['team_dynamics']['leadership_emergence'] ?? 75,
            'lessons_learned' => $this->generateLessonsLearned($simulation, $metrics)
        ];
    }

    protected function generateLessonsLearned(VirtualProjectSimulation $simulation, array $metrics): array
    {
        $lessons = [];
        
        if (($metrics['evm']['cost_performance_index'] ?? 1.0) < 0.9) {
            $lessons[] = 'Better cost estimation and control needed for future projects';
        }
        
        if (($metrics['risks']['risk_score'] ?? 0) > 60) {
            $lessons[] = 'Earlier risk identification and mitigation crucial';
        }
        
        if (($metrics['team_dynamics']['collaboration'] ?? 75) < 70) {
            $lessons[] = 'Team building and communication processes need improvement';
        }
        
        $lessons[] = 'Regular stakeholder engagement essential for project success';
        
        return $lessons;
    }
}
